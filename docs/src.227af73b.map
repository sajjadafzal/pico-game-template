{"version":3,"sources":["directions.js","families.js","shapeTypes.js","sprite.js","gameObject.js","level.js","game.js","index.js"],"names":["DIRECTIONS","FAMILIES","SHAPE_TYPES","sprite","img","w","naturalWidth","h","naturalHeight","pw","ph","frame","tickCount","ticksPerFrame","ctx","object","Math","PI","x","y","save","translate","canvas","width","height","direction","LEFT","rotate","UP","RIGHT","DOWN","drawImage","restore","GameObject","options","children","dx","dy","family","WALL","fill","name","text","type","RECT","zIndex","id","font","TEXT","IMAGE","SPRITE","HERO","ALIEN","hp","chp","isInLineOfSight","lastFireTime","BULLET","byHero","dmg","CIRCLE","isReal","src","SCALE_X","SCALE_Y","Object","create","map","n","o","forEach","strokeStyle","fillStyle","beginPath","arc","fillRect","fillText","draw","LEVEL","Game","SCREENS","container","assets","document","createElement","getContext","appendChild","topScore","localStorage","score","difficulty","screen","IN_GAME","objects","bullets","hero","Sprite","keyState","addEventListener","handleInput","e","redraw","clear","MAIN_MENU","drawMenu","END_GAME","drawEnd","updateState","window","requestAnimationFrame","gameObjects","getObjects","heroClone","HERO_SPEED","values","filter","k","length","target","killedGameObjects","i","isColliding","bullet","j","push","splice","delay","timeNow","Date","now","addBullet","b","indexOf","clearRect","addFlooring","addLighting","sort","a","drawHUD","lineWidth","rect","stroke","gradient","createRadialGradient","addColorStop","textAlign","event","preventDefault","which","source","x1","y1","coords","getBoundingClientRect","clientX","left","clientY","top","diffX","diffY","dist","sqrt","reduce","prev","cur","clone","c","querySelector","getElementById"],"mappings":"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","file":"src.227af73b.map","sourceRoot":"..\\src","sourcesContent":["const DIRECTIONS = {\r\n  LEFT: 'LEFT',\r\n  RIGHT: 'RIGHT',\r\n  UP: 'UP',\r\n  DOWN: 'DOWN',\r\n}\r\n\r\nexport default DIRECTIONS\r\n","/**\r\n * Family type of object i.e. HERO, ALIEN etc\r\n */\r\nconst FAMILIES = {\r\n  ALIEN: 'ALIEN',\r\n  BULLET: 'BULLET',\r\n  DOOR: 'DOOR',\r\n  HACKER: 'HACKER',\r\n  HERO: 'HERO',\r\n  WALL: 'WALL',\r\n}\r\n\r\nexport default FAMILIES\r\n","/**\r\n * Shape type of object i.e. TEXT, RECT etc\r\n */\r\nconst SHAPE_TYPES = {\r\n  TEXT: 'TEXT',\r\n  RECT: 'RECT',\r\n  CIRCLE: 'CIRCLE',\r\n  IMAGE: 'IMAGE',\r\n  SPRITE: 'SPRITE',\r\n}\r\n\r\nexport default SHAPE_TYPES\r\n","import DIRECTIONS from './directions.js'\r\n// import GameObject from './gameObject.js'\r\n\r\nexport default class sprite {\r\n  /**\r\n   * Create a re-useable sprite object using rpovided image sprite\r\n   * @param {HTMLImageElement} img SPrite image\r\n   */\r\n  constructor(img) {\r\n    this.img = img\r\n    this.w = img.naturalWidth\r\n    this.h = img.naturalHeight\r\n    this.pw = this.w\r\n    this.ph = this.h / 4\r\n\r\n    this.frame = 1\r\n    this.tickCount = 0\r\n    this.ticksPerFrame = 10\r\n  }\r\n\r\n  /**\r\n   * draw itself onto given context\r\n   * @param {CanvasRenderingContext2D} ctx Game canvas 2d context\r\n   * @param {GameObject} ctx Game canvas 2d context\r\n   */\r\n  draw(ctx, object) {\r\n    let x\r\n    let y\r\n\r\n    // save context for rotation\r\n    ctx.save()\r\n\r\n    // get frame to draw\r\n    this.tickCount += 1\r\n    // TODO: add check if any key is pressed\r\n    if (this.tickCount > this.ticksPerFrame) {\r\n      this.tickCount = 0\r\n      this.frame += 1\r\n      // TODO: skip bullet frame if not firing\r\n      if (this.frame > 3) {\r\n        this.frame = 1\r\n      }\r\n    }\r\n\r\n    ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2)\r\n\r\n    // adjust canvas according to object direction\r\n    switch (object.direction) {\r\n      case DIRECTIONS.LEFT:\r\n        ctx.rotate(-Math.PI / 2)\r\n        x = -object.x - ctx.canvas.width\r\n        y = -object.y - this.ph - 5 - ctx.canvas.height / 2\r\n        break\r\n      case DIRECTIONS.UP:\r\n        x = object.x - ctx.canvas.width / 2\r\n        y = object.y - ctx.canvas.height / 2\r\n        break\r\n      case DIRECTIONS.RIGHT:\r\n        ctx.rotate(-Math.PI / 2)\r\n        break\r\n      case DIRECTIONS.DOWN:\r\n      default:\r\n        ctx.rotate(Math.PI)\r\n        x = -object.x - this.pw - 7 + ctx.canvas.width / 2\r\n        y = -object.y - this.ph - 5 + ctx.canvas.height / 2\r\n        break\r\n    }\r\n\r\n    // draw frame from sprite\r\n    ctx.drawImage(\r\n      this.img,\r\n      0,\r\n      this.ph * this.frame,\r\n      this.pw,\r\n      this.ph,\r\n      x,\r\n      y,\r\n      object.w,\r\n      object.h\r\n    )\r\n\r\n    // restore context after rotation\r\n    ctx.restore()\r\n  }\r\n}\r\n","import DIRECTIONS from './directions.js'\r\nimport FAMILIES from './families.js'\r\nimport SHAPE_TYPES from './shapeTypes.js'\r\nimport Sprite from './sprite.js' // eslint-disable-line\r\n\r\n/**\r\n * GameObject\r\n */\r\nexport default class GameObject {\r\n  /**\r\n   *\r\n   * @param {Object} options Options object containing necessary props for drawing\r\n   * @param {Boolean} options.byHero if the bullet is fired by hero\r\n   * @param {Array<GameObject>} options.children GameObject children grouped with this object and drawn relativety to this parent\r\n   * @param {Number} options.dmg bullet damage to target\r\n   * @param {Number} options.dx speed across x-axis\r\n   * @param {Number} options.dy speed across y-axis\r\n   * @param {Object} options.family family of object\r\n   * @param {String} options.fill fill style\r\n   * @param {String} options.font font style & family\r\n   * @param {Number} options.h height\r\n   * @param {Number} options.hp health points\r\n   * @param {Boolean} options.isInLineOfSight true if this object is in line of sight of hero\r\n   * @param {Boolean} options.isReal true if the bullet is real false for tracer bullets\r\n   * @param {Number} options.lastFireTime time recorded when last bullet was fired by this object\r\n   * @param {String} options.name name\r\n   * @param {String} options.sprite sprite object\r\n   * @param {GameObject} options.src Source of this object\r\n   * @param {String} options.text text\r\n   * @param {String} options.type draw type of object i.e. rect, circle, image\r\n   * @param {Number} options.w width\r\n   * @param {Number} options.x x posititon of object\r\n   * @param {Number} options.y y position of object\r\n   * @param {Number} options.zIndex index level of object to draw, higher index means object will be on top\r\n   */\r\n  constructor(options) {\r\n    // children grouped with this object and drawn relativety to this parent\r\n    /** @type {Array<GameObject>} */\r\n    this.children = options.children || []\r\n    this.dx = options.dx\r\n    this.dy = options.dy\r\n    this.family = options.family || FAMILIES.WALL\r\n    this.fill = options.fill || '#000'\r\n    this.h = options.h || 2\r\n    this.img = options.img\r\n    this.name = options.name\r\n    /** @type {Sprite} */\r\n    this.sprite = options.sprite\r\n    this.text = options.text\r\n    this.type = options.type || SHAPE_TYPES.RECT\r\n    this.w = options.w || 2\r\n    this.x = options.x || 0\r\n    this.y = options.y || 0\r\n    this.zIndex = options.zIndex || 1\r\n\r\n    // assign id\r\n    // eslint-disable-next-line\r\n    this.id = ++GameObject.id\r\n\r\n    // set defauilt family as wall (if not text)\r\n    if (this.text) {\r\n      this.font = options.font || 4\r\n      this.text = options.text\r\n      this.type = SHAPE_TYPES.TEXT\r\n    } else if (this.img) {\r\n      this.type = SHAPE_TYPES.IMAGE\r\n    } else if (this.sprite) {\r\n      this.type = SHAPE_TYPES.SPRITE\r\n    }\r\n\r\n    switch (this.family) {\r\n      case FAMILIES.HERO:\r\n        this.x = 15\r\n        this.y = 50\r\n        this.direction = DIRECTIONS.LEFT\r\n      // eslint-disable-no-fallthrough\r\n      case FAMILIES.ALIEN:\r\n        this.w = 8\r\n        this.h = 8\r\n        this.hp = options.hp || 100\r\n        this.chp = this.hp\r\n        this.isInLineOfSight = false\r\n        this.lastFireTime = 0\r\n        this.direction = this.direction || DIRECTIONS.UP\r\n        break\r\n      case FAMILIES.BULLET:\r\n        this.byHero = options.byHero\r\n        this.dmg = options.dmg || 10\r\n        this.fill = 'orange'\r\n        this.w = 1\r\n        this.h = 1\r\n        this.type = SHAPE_TYPES.CIRCLE\r\n        this.isReal = options.isReal\r\n\r\n        /** @type {GameObject} */\r\n        this.src = options.src\r\n        break\r\n      case FAMILIES.WALL:\r\n        this.fill = options.fill || '#fff'\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * draw itself onto given context\r\n   * @param {CanvasRenderingContext2D} ctx Game canvas 2d context\r\n   */\r\n  draw(ctx) {\r\n    // only render real bullets\r\n    if (this.isReal === false) return\r\n\r\n    const SCALE_X = ctx.canvas.width / 100\r\n    const SCALE_Y = ctx.canvas.height / 100 // deduct HUD space\r\n\r\n    // clone this and each children into new array and update coordinates\r\n    /** @type {Array<GameObject>} */\r\n    const objects = [\r\n      Object.create(this),\r\n      ...this.children.map(o => {\r\n        let n = Object.create(o)\r\n        n.x += this.x\r\n        n.y += this.y\r\n        return n\r\n      }),\r\n    ]\r\n\r\n    // draw all\r\n    objects.forEach(o => {\r\n      o.x *= SCALE_X\r\n      o.y *= SCALE_Y\r\n      o.w *= SCALE_X\r\n      o.h *= SCALE_Y\r\n\r\n      ctx.strokeStyle = '#000'\r\n      ctx.fillStyle = o.fill\r\n\r\n      switch (o.type) {\r\n        case SHAPE_TYPES.CIRCLE:\r\n          // use circle bounding rect top, left as x,y\r\n          o.x += o.w / 2\r\n          o.y += o.w / 2\r\n\r\n          ctx.beginPath()\r\n          ctx.arc(o.x, o.y, o.w / 2, 0, Math.PI * 2, 0)\r\n          ctx.fill()\r\n          break\r\n        case SHAPE_TYPES.RECT:\r\n          ctx.fillRect(o.x, o.y, o.w, o.h)\r\n\r\n          // if (o.name) {\r\n          //   ctx.font = `8px arial`\r\n          //   ctx.fillStyle = 'blue'\r\n          //   ctx.fillText(o.name, o.x + o.w / 2 + 10, o.y + o.h / 2 - 10)\r\n          // }\r\n          break\r\n        case SHAPE_TYPES.TEXT:\r\n          // scale font\r\n          o.font *= SCALE_Y\r\n          // add font height to text shape to correct x,y\r\n          o.y += o.font\r\n\r\n          ctx.font = `${o.font}px arial`\r\n          ctx.fillText(o.text, o.x, o.y)\r\n          break\r\n        case SHAPE_TYPES.SPRITE:\r\n          o.sprite.draw(ctx, o)\r\n          break\r\n        case SHAPE_TYPES.IMAGE:\r\n        default:\r\n          if (o.img) {\r\n            ctx.drawImage(o.img, o.x, o.y, o.w, o.h)\r\n          }\r\n          break\r\n      }\r\n\r\n      // draw health bar\r\n      if (o.hp) {\r\n        ctx.fillStyle = '#00e635'\r\n        ctx.fillRect(o.x, o.y - 6, (o.chp * o.w) / o.hp, 4)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Detect if two objects are on-screen and colliding\r\n   * @param {GameObject} object Object\r\n   * @returns {Boolean} Returns true if collision is detected\r\n   */\r\n  isColliding(object) {\r\n    if (this.x + this.w < object.x) return false\r\n    if (this.x > object.x + object.w) return false\r\n    if (this.y + this.h < object.y) return false\r\n    if (this.y > object.y + object.h) return false\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n// assign ID to each object\r\nGameObject.id = 0\r\n","import GameObject from './gameObject.js'\r\nimport FAMILIES from './families.js'\r\n\r\n/**\r\n * Collection of objects to repsent game level\r\n */\r\nconst LEVEL = [\r\n  // enemies\r\n  new GameObject({\r\n    family: FAMILIES.ALIEN,\r\n    hp: 200,\r\n    h: 5,\r\n    w: 5,\r\n    y: 90,\r\n    x: 30,\r\n  }),\r\n  new GameObject({\r\n    family: FAMILIES.ALIEN,\r\n    hp: 150,\r\n    h: 5,\r\n    w: 5,\r\n    y: 90,\r\n    x: 40,\r\n  }),\r\n  new GameObject({\r\n    family: FAMILIES.ALIEN,\r\n    hp: 100,\r\n    h: 5,\r\n    w: 5,\r\n    y: 90,\r\n    x: 50,\r\n  }),\r\n  new GameObject({\r\n    family: FAMILIES.ALIEN,\r\n    hp: 50,\r\n    h: 5,\r\n    w: 5,\r\n    y: 90,\r\n    x: 60,\r\n  }),\r\n  // walls\r\n  // TODO: use/generate wall texture\r\n  new GameObject({\r\n    w: 100,\r\n    fill: '#000',\r\n  }),\r\n  new GameObject({\r\n    y: 98,\r\n    w: 100,\r\n    fill: '#000',\r\n  }),\r\n  new GameObject({\r\n    h: 100,\r\n    fill: '#000',\r\n  }),\r\n  new GameObject({\r\n    x: 98,\r\n    h: 100,\r\n    fill: '#000',\r\n  }),\r\n  new GameObject({\r\n    name: 'L270',\r\n    x: 15,\r\n    y: 15,\r\n    h: 20,\r\n    children: [\r\n      new GameObject({\r\n        w: 20,\r\n      }),\r\n    ],\r\n  }),\r\n  new GameObject({\r\n    name: 'L180DegreePart1',\r\n    x: 80,\r\n    y: 15,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L180DegreePart2',\r\n    x: 60,\r\n    y: 15,\r\n    w: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'T180DegreePart1',\r\n    x: 46,\r\n    y: 15,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'T180DegreePart2',\r\n    x: 37,\r\n    y: 35,\r\n    w: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L2_270DegreePart1',\r\n    x: 15,\r\n    y: 65,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L2_270DegreePart2',\r\n    x: 15,\r\n    y: 65,\r\n    w: 26,\r\n  }),\r\n  new GameObject({\r\n    name: 'L2_180DegreePart1',\r\n    x: 80,\r\n    y: 65,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L2_180DegreePart2',\r\n    x: 55,\r\n    y: 65,\r\n    w: 25,\r\n  }),\r\n  new GameObject({\r\n    name: 'L3_270DegreePart1',\r\n    x: 32,\r\n    y: 50,\r\n    h: 17,\r\n\r\n    children: [\r\n      new GameObject({\r\n        name: 'L3_270DegreePart2',\r\n        w: 30,\r\n      }),\r\n      new GameObject({\r\n        name: 'L3_270DegreePart2',\r\n        x: 30,\r\n        h: 17,\r\n      }),\r\n    ],\r\n  }),\r\n  new GameObject({\r\n    name: 'L3_270DegreePart2',\r\n    x: 15,\r\n    y: 65,\r\n    w: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L3_180DegreePart1',\r\n    x: 80,\r\n    y: 65,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L3_180DegreePart2',\r\n    x: 60,\r\n    y: 65,\r\n    w: 20,\r\n  }),\r\n]\r\n\r\nexport default LEVEL\r\n","import DIRECTIONS from './directions.js'\r\nimport FAMILIES from './families.js'\r\nimport GameObject from './gameObject.js'\r\nimport LEVEL from './level.js'\r\nimport SHAPE_TYPES from './shapeTypes.js'\r\nimport Sprite from './sprite.js'\r\n\r\nconst SCREENS = {\r\n  MAIN_MENU: 'MAIN_MENU',\r\n  IN_GAME: 'IN_GAME',\r\n  END_GAME: 'END_GAME',\r\n}\r\n\r\n/**\r\n * Game\r\n */\r\nexport default class Game {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} container Container for game canvas\r\n   * @param {Number} width widht of game canvas\r\n   * @param {Number} height height of game canvas\r\n   * @param {Array<Object>} assets assets urls to load {name, media}\r\n   * @param {String} assets.name name of asset\r\n   * @param {HTMLImageElement|HTMLAudioElement} assets.media image or audio\r\n   */\r\n  constructor(container, width, height, assets) {\r\n    // game assets\r\n    this.assets = assets\r\n\r\n    // create canvas\r\n    this.ctx = document.createElement('canvas').getContext('2d')\r\n    this.ctx.canvas.width = this.w = width\r\n    this.ctx.canvas.height = this.h = height\r\n    container.appendChild(this.ctx.canvas)\r\n\r\n    // top score of current session\r\n    this.topScore = localStorage.topScore || 0\r\n    // score\r\n    this.score = 0\r\n    // level difficulty\r\n    this.difficulty = 1\r\n    // current scene\r\n    this.screen = SCREENS.IN_GAME\r\n\r\n    // current scene objects collection\r\n    /** @type {Array<GameObject>} */\r\n    this.objects = Object.create(LEVEL)\r\n\r\n    // bullets collection\r\n    /** @type {Array<GameObject>} */\r\n    this.bullets = []\r\n\r\n    // create a hero object\r\n    /** @type {GameObject} */\r\n    this.hero = new GameObject({\r\n      family: FAMILIES.HERO,\r\n      sprite: new Sprite(assets.hero),\r\n    })\r\n\r\n    // track key pressed at any time\r\n    this.keyState = {}\r\n\r\n    // input handling\r\n    this.ctx.canvas.addEventListener('click', e => this.handleInput(e))\r\n    document.addEventListener('keydown', e => this.handleInput(e))\r\n    document.addEventListener('keyup', e => this.handleInput(e))\r\n\r\n    // start game loop\r\n    this.redraw()\r\n  }\r\n\r\n  /**\r\n   * Main game draw loop\r\n   */\r\n  redraw() {\r\n    // clear previous frame\r\n    this.clear()\r\n\r\n    if (this.screen === SCREENS.MAIN_MENU) {\r\n      this.drawMenu()\r\n    } else if (this.screen === SCREENS.END_GAME) {\r\n      this.drawEnd()\r\n    } else {\r\n      // update state\r\n      this.updateState()\r\n\r\n      // draw current frame\r\n      this.draw()\r\n    }\r\n\r\n    // redraw loop\r\n    // window.setTimeout(() => {\r\n    window.requestAnimationFrame(() => {\r\n      this.redraw()\r\n    })\r\n    // }, 2000)\r\n  }\r\n\r\n  /**\r\n   * update game state variables\r\n   */\r\n  updateState() {\r\n    /** @type {Array<GameObject>} */\r\n    const gameObjects = [this.hero, ...this.getObjects()]\r\n\r\n    /** @type {GameObject} */\r\n    let heroClone = Object.create(this.hero)\r\n    let HERO_SPEED = 0.33\r\n\r\n    // reduce diagonal speed\r\n    if (Object.values(this.keyState).filter(k => k).length > 1) {\r\n      HERO_SPEED /= 1.5\r\n    }\r\n\r\n    // update input controlled objects\r\n    if (this.keyState[37] || this.keyState[65]) {\r\n      // arrow left\r\n      heroClone.x -= HERO_SPEED\r\n      heroClone.direction = DIRECTIONS.LEFT\r\n    }\r\n\r\n    if (this.keyState[38] || this.keyState[87]) {\r\n      // arrow up\r\n      heroClone.y -= HERO_SPEED\r\n      heroClone.direction = DIRECTIONS.UP\r\n    }\r\n\r\n    if (this.keyState[39] || this.keyState[68]) {\r\n      // arrow right\r\n      heroClone.x += HERO_SPEED\r\n      heroClone.direction = DIRECTIONS.RIGHT\r\n    }\r\n\r\n    if (this.keyState[40] || this.keyState[83]) {\r\n      // arrow down\r\n      heroClone.y += HERO_SPEED\r\n      heroClone.direction = DIRECTIONS.DOWN\r\n    }\r\n\r\n    // collision detection\r\n    const killedGameObjects = []\r\n    for (let i = 0; i < gameObjects.length; i += 1) {\r\n      const target = gameObjects[i]\r\n\r\n      // ignore text shape\r\n      if (target.type === SHAPE_TYPES.TEXT) continue\r\n\r\n      // check hero collision\r\n      if (target.family === FAMILIES.WALL && heroClone.isColliding(target)) {\r\n        heroClone = this.hero\r\n      }\r\n\r\n      // check bullet collision\r\n      for (let j = 0; j < this.bullets.length; j += 1) {\r\n        const bullet = this.bullets[j]\r\n\r\n        // disable friendly fire\r\n        if (\r\n          (bullet.byHero && target.family === FAMILIES.HERO) ||\r\n          (!bullet.byHero && target.family === FAMILIES.ALIEN)\r\n        )\r\n          continue\r\n\r\n        // check bullet collision\r\n        if (bullet.isColliding(target)) {\r\n          if (target.family === FAMILIES.WALL) {\r\n            bullet.src.isInLineOfSight = false\r\n          } else {\r\n            bullet.src.isInLineOfSight = true\r\n          }\r\n\r\n          if (bullet.isReal) {\r\n            target.chp -= bullet.dmg\r\n\r\n            // remove target if health is zero\r\n            if (target.chp <= 0) {\r\n              if (target.family === FAMILIES.HERO) {\r\n                this.screen = SCREENS.END_GAME\r\n\r\n                // break both loops\r\n                j = this.bullets.length\r\n                i = gameObjects.length\r\n              } else {\r\n                killedGameObjects.push(target.id)\r\n              }\r\n            }\r\n          }\r\n\r\n          // remove bullet from collection\r\n          this.bullets.splice(j, 1)\r\n        }\r\n      }\r\n\r\n      // add bullets\r\n      if (target.family === FAMILIES.ALIEN) {\r\n        const delay = target.isInLineOfSight ? 1000 : 50\r\n        const timeNow = Date.now()\r\n\r\n        // fire tracer bullets after 100ms\r\n        // fire bullets after 750ms\r\n        if (timeNow - target.lastFireTime > delay) {\r\n          this.addBullet(null, target)\r\n          target.lastFireTime = timeNow\r\n        }\r\n      }\r\n    }\r\n\r\n    // update bullets\r\n    this.bullets.forEach(b => {\r\n      b.x += b.dx\r\n      b.y += b.dy\r\n    })\r\n\r\n    // update hero position\r\n    this.hero = heroClone\r\n\r\n    // remove objects with zero HP\r\n    this.objects = this.objects.filter(o => {\r\n      if (killedGameObjects.indexOf(o.id) > -1) {\r\n        // add score of each enemy\r\n        this.score += (o.hp / 10) * this.difficulty\r\n        return false\r\n      }\r\n\r\n      return true\r\n    })\r\n\r\n    // update difficulty if all enemies dead\r\n    if (this.objects.filter(o => o.family === FAMILIES.ALIEN).length === 0) {\r\n      // increase difficulty\r\n      this.difficulty += 1\r\n      // reset game objects\r\n      this.hero.chp = 100\r\n      this.hero.x = 45\r\n      this.hero.y = 5\r\n\r\n      this.objects = Object.create(LEVEL)\r\n      this.screen = SCREENS.IN_GAME\r\n    }\r\n  }\r\n\r\n  /**\r\n   * clear canvas\r\n   */\r\n  clear() {\r\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height)\r\n  }\r\n\r\n  /**\r\n   * draw all game objects in current frame\r\n   */\r\n  draw() {\r\n    // add floor\r\n    this.addFlooring()\r\n\r\n    // add lighting\r\n    this.addLighting()\r\n\r\n    // draw bullets\r\n    this.bullets.forEach(bullet => {\r\n      bullet.draw(this.ctx)\r\n    })\r\n\r\n    // sort by zIndex and call draw for each object\r\n    this.objects.sort((a, b) => a.zIndex - b.zIndex).forEach(o => {\r\n      o.draw(this.ctx)\r\n    })\r\n\r\n    // draw hero\r\n    this.hero.draw(this.ctx)\r\n\r\n    // draw hud\r\n    this.drawHUD()\r\n  }\r\n\r\n  addFlooring() {\r\n    const step = 20\r\n\r\n    this.ctx.lineWidth = 1\r\n    this.ctx.strokeStyle = 'rgba(1,14,4,0.2)'\r\n    this.ctx.beginPath()\r\n\r\n    for (let i = 0; i < this.w - 0; i += step) {\r\n      for (let j = 0; j < this.h - 0; j += step) {\r\n        this.ctx.rect(i, j, step, step)\r\n      }\r\n    }\r\n\r\n    this.ctx.stroke()\r\n  }\r\n\r\n  addLighting() {\r\n    const x = this.w / 2\r\n    const y = this.h / 2\r\n\r\n    let gradient = this.ctx.createRadialGradient(x, y, 50, x, y, this.w - 100)\r\n    gradient.addColorStop(0, 'rgba(17,102,37,0.9)')\r\n    gradient.addColorStop(1, 'rgba(1,14,4,1)')\r\n    this.ctx.fillStyle = gradient\r\n\r\n    this.ctx.fillRect(0, 0, this.w, this.h)\r\n  }\r\n\r\n  drawHUD() {\r\n    const font = (3.5 * this.h) / 100\r\n\r\n    this.ctx.fillStyle = 'rgba(1,14,4,0.5)'\r\n    this.ctx.fillRect(0, 0, this.w, 50)\r\n\r\n    this.ctx.textAlign = 'center'\r\n    this.ctx.font = `${font}px arial`\r\n    this.ctx.fillStyle = '#fff'\r\n    this.ctx.fillText(\r\n      `Score: ${this.score}         Level: ${this.difficulty}         Health: ${\r\n        this.hero.chp\r\n      }         Top Score: ${this.topScore}`,\r\n      this.w / 2,\r\n      33\r\n    )\r\n  }\r\n\r\n  drawMenu() {\r\n    const font = (8 * this.h) / 100\r\n    const x = this.w / 2\r\n    const y = (40 * this.h) / 100\r\n\r\n    this.ctx.fillStyle = 'rgba(1,14,4,1)'\r\n    this.ctx.fillRect(0, 0, this.w, this.h)\r\n\r\n    this.ctx.textAlign = 'center'\r\n\r\n    this.ctx.fillStyle = '#fff'\r\n    this.ctx.font = `${font}px arial`\r\n    this.ctx.fillText(\"Tony Hawk's Gun Smash\", x, y)\r\n\r\n    this.ctx.fillStyle = 'rgba(255,255,255,0.5)'\r\n    this.ctx.font = `${font / 2}px arial`\r\n    this.ctx.fillText('Click anywhere to start', x, y * 1.75)\r\n  }\r\n\r\n  drawEnd() {\r\n    const font = (8 * this.h) / 100\r\n    const x = this.w / 2\r\n    const y = (40 * this.h) / 100\r\n\r\n    this.ctx.fillStyle = 'rgba(1,14,4,1)'\r\n    this.ctx.fillRect(0, 0, this.w, this.h)\r\n\r\n    this.ctx.textAlign = 'center'\r\n\r\n    this.ctx.fillStyle = '#fff'\r\n    this.ctx.font = `${font}px arial`\r\n\r\n    if (this.score > this.topScore) {\r\n      this.ctx.fillText('You Pro!', x, y)\r\n    } else {\r\n      this.ctx.fillText('What a Noob!', x, y)\r\n    }\r\n\r\n    this.ctx.fillStyle = 'rgba(255,255,255,0.5)'\r\n    this.ctx.font = `${font / 2}px arial`\r\n    this.ctx.fillText('See you next time!', x, y * 1.25)\r\n    this.ctx.fillText('Click anywhere to restart', x, y * 1.75)\r\n  }\r\n\r\n  /**\r\n   * Handle events\r\n   * @param {Event} event keyboard or mouse event\r\n   */\r\n  handleInput(event) {\r\n    event.preventDefault()\r\n\r\n    if (event.which === 1) {\r\n      if (this.screen === SCREENS.MAIN_MENU) {\r\n        // reset game objects\r\n        this.hero.chp = 100\r\n        this.hero.x = 45\r\n        this.hero.y = 5\r\n\r\n        this.screen = SCREENS.IN_GAME\r\n        this.objects = Object.create(LEVEL)\r\n      } else if (this.screen === SCREENS.IN_GAME) {\r\n        this.addBullet(event)\r\n      } else if (this.screen === SCREENS.END_GAME) {\r\n        this.screen = SCREENS.MAIN_MENU\r\n\r\n        // update top score\r\n        if (this.score > this.topScore) {\r\n          this.topScore = this.score\r\n          localStorage.topScore = this.topScore\r\n          this.score = 0\r\n        }\r\n      }\r\n    } else if (event.type.indexOf('down') > -1) {\r\n      this.keyState[event.which] = event\r\n    } else {\r\n      this.keyState[event.which] = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add bullet to the collection\r\n   * @param {Event?} event Click Event\r\n   * @param {GameObject} source Source Game Object\r\n   */\r\n  addBullet(event, source) {\r\n    let x\r\n    let y\r\n    let x1\r\n    let y1\r\n\r\n    // check if bullet is fired by hero\r\n    let byHero = !source\r\n\r\n    // check if source is click event or computer enemy\r\n    if (event) {\r\n      const coords = this.ctx.canvas.getBoundingClientRect()\r\n      x = this.hero.x // + this.hero.w * 0.33\r\n      y = this.hero.y // - this.hero.h * 0.33\r\n      x1 = -this.w / 100 + ((event.clientX - coords.left) * 100) / this.w\r\n      y1 = -this.h / 100 + ((event.clientY - coords.top) * 100) / this.h\r\n    } else {\r\n      x = source.x\r\n      y = source.y\r\n      x1 = this.hero.x\r\n      y1 = this.hero.y\r\n    }\r\n\r\n    // find the speed\r\n    const diffX = x1 - x\r\n    const diffY = y1 - y\r\n    const dist = Math.sqrt(diffX ** 2 + diffY ** 2)\r\n    const dx = (diffX / dist) * 1.5\r\n    const dy = (diffY / dist) * 1.5\r\n\r\n    // find initial positon of bullet\r\n    x += this.hero.w / 2 // + dx * (this.hero.w / 1.25)\r\n    y += this.hero.h / 2 // + dy * (this.hero.h / 1.25)\r\n\r\n    // add bullet to collection\r\n    this.bullets.push(\r\n      new GameObject({\r\n        byHero,\r\n        dx,\r\n        dy,\r\n        family: FAMILIES.BULLET,\r\n        x,\r\n        y,\r\n        src: source || this.hero,\r\n        isReal: byHero || source.isInLineOfSight,\r\n      })\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns all shapes as flat array (except text ones)\r\n   */\r\n  getObjects() {\r\n    return this.objects.reduce((prev, cur) => {\r\n      prev.push(cur)\r\n\r\n      cur.children.forEach(c => {\r\n        const clone = Object.create(c)\r\n        clone.x += cur.x\r\n        clone.y += cur.y\r\n        prev.push(clone)\r\n      })\r\n\r\n      return prev\r\n    }, [])\r\n    // .filter(o => o.type !== SHAPE_TYPES.TEXT)\r\n  }\r\n}\r\n","import Game from './game.js'\r\n\r\n// initilize  new game\r\nnew Game(document.querySelector('#game'), 480, 480, {\r\n  hero: document.getElementById('hero'),\r\n  enemy: document.getElementById('hero'),\r\n})\r\n"]}
{"version":3,"sources":["families.js","shapeTypes.js","gameObject.js","level.js","game.js","index.js"],"names":["FAMILIES","SHAPE_TYPES","GameObject","options","children","dx","dy","fill","h","name","text","w","x","y","zIndex","id","font","type","TEXT","family","WALL","RECT","HERO","ALIEN","hp","chp","isInLineOfSight","lastFireTime","BULLET","byHero","dmg","CIRCLE","isReal","src","ctx","SCALE_X","canvas","width","SCALE_Y","height","Object","create","map","n","o","forEach","strokeStyle","fillStyle","beginPath","arc","PI","fillRect","fillText","IMAGE","object","LEVEL","Game","SCREENS","container","assets","document","createElement","getContext","appendChild","topScore","score","difficulty","screen","IN_GAME","objects","bullets","hero","keyState","addEventListener","handleInput","e","redraw","clear","MAIN_MENU","drawMenu","END_GAME","drawEnd","updateState","draw","window","requestAnimationFrame","gameObjects","getObjects","heroClone","HERO_SPEED","values","filter","k","length","target","killedGameObjects","i","isColliding","bullet","j","push","splice","delay","timeNow","Date","now","addBullet","b","indexOf","clearRect","addFlooring","addLighting","sort","a","drawHUD","lineWidth","rect","stroke","gradient","createRadialGradient","addColorStop","Math","textAlign","event","preventDefault","which","source","x1","y1","coords","getBoundingClientRect","clientX","left","clientY","top","diffX","diffY","dist","sqrt","reduce","prev","cur","c","querySelector","getElementById"],"mappings":"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","file":"index.map","sourceRoot":"..\\src","sourcesContent":["/**\r\n * Family type of object i.e. HERO, ALIEN etc\r\n */\r\nconst FAMILIES = {\r\n  ALIEN: 'ALIEN',\r\n  BULLET: 'BULLET',\r\n  DOOR: 'DOOR',\r\n  HACKER: 'HACKER',\r\n  HERO: 'HERO',\r\n  WALL: 'WALL',\r\n}\r\n\r\nexport default FAMILIES\r\n","/**\r\n * Shape type of object i.e. TEXT, RECT etc\r\n */\r\nconst SHAPE_TYPES = {\r\n  TEXT: 'TEXT',\r\n  RECT: 'RECT',\r\n  CIRCLE: 'CIRCLE',\r\n  IMAGE: 'IMG',\r\n}\r\n\r\nexport default SHAPE_TYPES\r\n","import FAMILIES from './families.js'\r\nimport SHAPE_TYPES from './shapeTypes.js'\r\n\r\n/**\r\n * GameObject\r\n */\r\nexport default class GameObject {\r\n  /**\r\n   *\r\n   * @param {Object} options Options object containing necessary props for drawing\r\n   * @param {Boolean} options.byHero if the bullet is fired by hero\r\n   * @param {Array<GameObject>} options.children GameObject children grouped with this object and drawn relativety to this parent\r\n   * @param {Number} options.dmg bullet damage to target\r\n   * @param {Number} options.dx speed across x-axis\r\n   * @param {Number} options.dy speed across y-axis\r\n   * @param {Object} options.family family of object\r\n   * @param {String} options.fill fill style\r\n   * @param {String} options.font font style & family\r\n   * @param {Number} options.h height\r\n   * @param {Number} options.hp health points\r\n   * @param {Boolean} options.isInLineOfSight true if this object is in line of sight of hero\r\n   * @param {Boolean} options.isReal true if the bullet is real false for tracer bullets\r\n   * @param {Number} options.lastFireTime time recorded when last bullet was fired by this object\r\n   * @param {String} options.name name\r\n   * @param {GameObject} options.src Source of this object\r\n   * @param {String} options.text text\r\n   * @param {String} options.type draw type of object i.e. rect, circle, image\r\n   * @param {Number} options.w width\r\n   * @param {Number} options.x x posititon of object\r\n   * @param {Number} options.y y position of object\r\n   * @param {Number} options.zIndex index level of object to draw, higher index means object will be on top\r\n   */\r\n  constructor(options) {\r\n    // children grouped with this object and drawn relativety to this parent\r\n    /** @type {Array<GameObject>} */\r\n    this.children = options.children || []\r\n    this.dx = options.dx\r\n    this.dy = options.dy\r\n    this.fill = options.fill || '#000'\r\n    this.h = options.h || 2\r\n    this.name = options.name\r\n    this.text = options.text\r\n    this.w = options.w || 2\r\n    this.x = options.x || 0\r\n    this.y = options.y || 0\r\n    this.zIndex = options.zIndex || 1\r\n\r\n    // assign id\r\n    // eslint-disable-next-line\r\n    this.id = ++GameObject.id\r\n\r\n    // set defauilt family as wall (if not text)\r\n    if (this.text) {\r\n      this.font = options.font || 4\r\n      this.text = options.text\r\n      this.type = SHAPE_TYPES.TEXT\r\n    } else {\r\n      this.family = options.family || FAMILIES.WALL\r\n      this.type = options.type || SHAPE_TYPES.RECT\r\n    }\r\n\r\n    switch (this.family) {\r\n      case FAMILIES.HERO:\r\n        this.x = 45\r\n        this.y = 5\r\n      // eslint-disable-no-fallthrough\r\n      case FAMILIES.ALIEN:\r\n        this.w = 6\r\n        this.h = 6\r\n        this.hp = options.hp || 100\r\n        this.chp = this.hp\r\n        this.isInLineOfSight = false\r\n        this.lastFireTime = 0\r\n        break\r\n      // case FAMILIES.WALL:\r\n      //  this.type = options.type || SHAPE_TYPES.RECT\r\n      // break\r\n      case FAMILIES.BULLET:\r\n        this.byHero = options.byHero\r\n        this.dmg = options.dmg || 10\r\n        this.fill = 'orange'\r\n        this.w = 1\r\n        this.h = 1\r\n        this.type = SHAPE_TYPES.CIRCLE\r\n        this.isReal = options.isReal\r\n\r\n        /** @type {GameObject} */\r\n        this.src = options.src\r\n        break\r\n      case FAMILIES.WALL:\r\n        this.fill = options.fill || '#fff'\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * draw itself onto given context\r\n   * @param {CanvasRenderingContext2D} ctx Game canvas 2d context\r\n   */\r\n  draw(ctx) {\r\n    // only render real bullets\r\n    if (this.isReal === false) return\r\n\r\n    const SCALE_X = ctx.canvas.width / 100\r\n    const SCALE_Y = (ctx.canvas.height - 50) / 100 // deduct HUD space\r\n\r\n    // clone this and each children into new array and update coordinates\r\n    /** @type {Array<GameObject>} */\r\n    const objects = [\r\n      Object.create(this),\r\n      ...this.children.map(o => {\r\n        let n = Object.create(o)\r\n        n.x += this.x\r\n        n.y += this.y\r\n        return n\r\n      }),\r\n    ]\r\n\r\n    // draw all\r\n    objects.forEach(o => {\r\n      o.x *= SCALE_X\r\n      o.y *= SCALE_Y\r\n      o.w *= SCALE_X\r\n      o.h *= SCALE_Y\r\n\r\n      // move each object 50px down for HUD\r\n      o.y += 50\r\n\r\n      ctx.strokeStyle = '#000'\r\n      ctx.fillStyle = o.fill\r\n\r\n      switch (o.type) {\r\n        case SHAPE_TYPES.CIRCLE:\r\n          // use circle bounding rect top, left as x,y\r\n          o.x += o.w / 2\r\n          o.y += o.w / 2\r\n\r\n          ctx.beginPath()\r\n          ctx.arc(o.x, o.y, o.w / 2, 0, Math.PI * 2, 0)\r\n          ctx.fill()\r\n          break\r\n        case SHAPE_TYPES.RECT:\r\n          ctx.fillRect(o.x, o.y, o.w, o.h)\r\n\r\n          // if (o.name) {\r\n          //   ctx.font = `8px arial`\r\n          //   ctx.fillStyle = 'blue'\r\n          //   ctx.fillText(o.name, o.x + o.w / 2 + 10, o.y + o.h / 2 - 10)\r\n          // }\r\n          break\r\n        case SHAPE_TYPES.TEXT:\r\n          // scale font\r\n          o.font *= SCALE_Y\r\n          // add font height to text shape to correct x,y\r\n          o.y += o.font\r\n\r\n          ctx.font = `${o.font}px arial`\r\n          ctx.fillText(o.text, o.x, o.y)\r\n          break\r\n        case SHAPE_TYPES.IMAGE:\r\n        default:\r\n          // TODO: implement sprites\r\n          break\r\n      }\r\n\r\n      // draw health bar\r\n      if (o.hp) {\r\n        ctx.fillStyle = '#00e635'\r\n        ctx.fillRect(o.x, o.y - 6, (o.chp * o.w) / o.hp, 4)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Detect if two objects are on-screen and colliding\r\n   * @param {GameObject} object Object\r\n   * @returns {Boolean} Returns true if collision is detected\r\n   */\r\n  isColliding(object) {\r\n    if (this.x + this.w < object.x) return false\r\n    if (this.x > object.x + object.w) return false\r\n    if (this.y + this.h < object.y) return false\r\n    if (this.y > object.y + object.h) return false\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n// assign ID to each object\r\nGameObject.id = 0\r\n","import GameObject from './gameObject.js'\r\nimport FAMILIES from './families.js'\r\n\r\n/**\r\n * Collection of objects to repsent game level\r\n */\r\nconst LEVEL = [\r\n  // enemies\r\n  new GameObject({\r\n    family: FAMILIES.ALIEN,\r\n    hp: 200,\r\n    h: 5,\r\n    w: 5,\r\n    y: 90,\r\n    x: 30,\r\n  }),\r\n  new GameObject({\r\n    family: FAMILIES.ALIEN,\r\n    hp: 150,\r\n    h: 5,\r\n    w: 5,\r\n    y: 90,\r\n    x: 40,\r\n  }),\r\n  new GameObject({\r\n    family: FAMILIES.ALIEN,\r\n    hp: 100,\r\n    h: 5,\r\n    w: 5,\r\n    y: 90,\r\n    x: 50,\r\n  }),\r\n  new GameObject({\r\n    family: FAMILIES.ALIEN,\r\n    hp: 50,\r\n    h: 5,\r\n    w: 5,\r\n    y: 90,\r\n    x: 60,\r\n  }),\r\n  // walls\r\n  // TODO: use/generate wall texture\r\n  new GameObject({\r\n    w: 100,\r\n    fill: '#000',\r\n  }),\r\n  new GameObject({\r\n    y: 98,\r\n    w: 100,\r\n    fill: '#000',\r\n  }),\r\n  new GameObject({\r\n    h: 100,\r\n    fill: '#000',\r\n  }),\r\n  new GameObject({\r\n    x: 98,\r\n    h: 100,\r\n    fill: '#000',\r\n  }),\r\n  new GameObject({\r\n    name: 'L270',\r\n    x: 15,\r\n    y: 15,\r\n    h: 20,\r\n    children: [\r\n      new GameObject({\r\n        w: 20,\r\n      }),\r\n    ],\r\n  }),\r\n  new GameObject({\r\n    name: 'L180DegreePart1',\r\n    x: 80,\r\n    y: 15,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L180DegreePart2',\r\n    x: 60,\r\n    y: 15,\r\n    w: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'T180DegreePart1',\r\n    x: 46,\r\n    y: 15,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'T180DegreePart2',\r\n    x: 37,\r\n    y: 35,\r\n    w: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L2_270DegreePart1',\r\n    x: 15,\r\n    y: 65,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L2_270DegreePart2',\r\n    x: 15,\r\n    y: 65,\r\n    w: 26,\r\n  }),\r\n  new GameObject({\r\n    name: 'L2_180DegreePart1',\r\n    x: 80,\r\n    y: 65,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L2_180DegreePart2',\r\n    x: 55,\r\n    y: 65,\r\n    w: 25,\r\n  }),\r\n  new GameObject({\r\n    name: 'L3_270DegreePart1',\r\n    x: 32,\r\n    y: 50,\r\n    h: 17,\r\n\r\n    children: [\r\n      new GameObject({\r\n        name: 'L3_270DegreePart2',\r\n        w: 30,\r\n      }),\r\n      new GameObject({\r\n        name: 'L3_270DegreePart2',\r\n        x: 30,\r\n        h: 17,\r\n      }),\r\n    ],\r\n  }),\r\n  new GameObject({\r\n    name: 'L3_270DegreePart2',\r\n    x: 15,\r\n    y: 65,\r\n    w: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L3_180DegreePart1',\r\n    x: 80,\r\n    y: 65,\r\n    h: 20,\r\n  }),\r\n  new GameObject({\r\n    name: 'L3_180DegreePart2',\r\n    x: 60,\r\n    y: 65,\r\n    w: 20,\r\n  }),\r\n]\r\n\r\nexport default LEVEL\r\n","import FAMILIES from './families.js'\r\nimport GameObject from './gameObject.js'\r\nimport LEVEL from './level.js'\r\nimport SHAPE_TYPES from './shapeTypes.js'\r\n\r\nconst SCREENS = {\r\n  MAIN_MENU: 'MAIN_MENU',\r\n  IN_GAME: 'IN_GAME',\r\n  END_GAME: 'END_GAME',\r\n}\r\n\r\n/**\r\n * Game\r\n */\r\nexport default class Game {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} container Container for game canvas\r\n   * @param {Number} width widht of game canvas\r\n   * @param {Number} height height of game canvas\r\n   * @param {Array<Object>} assets assets urls to load {name, media}\r\n   * @param {String} assets.name name of asset\r\n   * @param {HTMLImageElement|HTMLAudioElement} assets.media image or audio\r\n   */\r\n  constructor(container, width, height, assets) {\r\n    // game assets\r\n    this.assets = assets\r\n\r\n    // create canvas\r\n    this.ctx = document.createElement('canvas').getContext('2d')\r\n    this.ctx.canvas.width = this.w = width\r\n    this.ctx.canvas.height = this.h = height\r\n    container.appendChild(this.ctx.canvas)\r\n\r\n    // top score of current session\r\n    this.topScore = 0\r\n    // score\r\n    this.score = 0\r\n    // level difficulty\r\n    this.difficulty = 1\r\n    // current scene\r\n    this.screen = SCREENS.IN_GAME\r\n\r\n    // current scene objects collection\r\n    /** @type {Array<GameObject>} */\r\n    this.objects = Object.create(LEVEL)\r\n\r\n    // bullets collection\r\n    /** @type {Array<GameObject>} */\r\n    this.bullets = []\r\n\r\n    // create a hero object\r\n    /** @type {GameObject} */\r\n    this.hero = new GameObject({\r\n      family: FAMILIES.HERO,\r\n    })\r\n\r\n    // track key pressed at any time\r\n    this.keyState = {}\r\n\r\n    // input handling\r\n    this.ctx.canvas.addEventListener('click', e => this.handleInput(e))\r\n    document.addEventListener('keydown', e => this.handleInput(e))\r\n    document.addEventListener('keyup', e => this.handleInput(e))\r\n\r\n    // start game loop\r\n    this.redraw()\r\n  }\r\n\r\n  /**\r\n   * Main game draw loop\r\n   */\r\n  redraw() {\r\n    // clear previous frame\r\n    this.clear()\r\n\r\n    if (this.screen === SCREENS.MAIN_MENU) {\r\n      this.drawMenu()\r\n    } else if (this.screen === SCREENS.END_GAME) {\r\n      this.drawEnd()\r\n    } else {\r\n      // update state\r\n      this.updateState()\r\n\r\n      // draw current frame\r\n      this.draw()\r\n    }\r\n\r\n    // redraw loop\r\n    // window.setTimeout(() => {\r\n    window.requestAnimationFrame(() => {\r\n      this.redraw()\r\n    })\r\n    // }, 2000)\r\n  }\r\n\r\n  /**\r\n   * update game state variables\r\n   */\r\n  updateState() {\r\n    /** @type {Array<GameObject>} */\r\n    const gameObjects = [this.hero, ...this.getObjects()]\r\n\r\n    /** @type {GameObject} */\r\n    let heroClone = Object.create(this.hero)\r\n    let HERO_SPEED = 0.33\r\n\r\n    // reduce diagonal speed\r\n    if (Object.values(this.keyState).filter(k => k).length > 1) {\r\n      HERO_SPEED /= 1.5\r\n    }\r\n\r\n    // update input controlled objects\r\n    if (this.keyState[37] || this.keyState[65]) {\r\n      // arrow left\r\n      heroClone.x -= HERO_SPEED\r\n    }\r\n\r\n    if (this.keyState[38] || this.keyState[87]) {\r\n      // arrow up\r\n      heroClone.y -= HERO_SPEED\r\n    }\r\n\r\n    if (this.keyState[39] || this.keyState[68]) {\r\n      // arrow right\r\n      heroClone.x += HERO_SPEED\r\n    }\r\n\r\n    if (this.keyState[40] || this.keyState[83]) {\r\n      // arrow down\r\n      heroClone.y += HERO_SPEED\r\n    }\r\n\r\n    // collision detection\r\n    const killedGameObjects = []\r\n    for (let i = 0; i < gameObjects.length; i += 1) {\r\n      const target = gameObjects[i]\r\n\r\n      // ignore text shape\r\n      if (target.type === SHAPE_TYPES.TEXT) continue\r\n\r\n      // check hero collision\r\n      if (target.family === FAMILIES.WALL && heroClone.isColliding(target)) {\r\n        heroClone = this.hero\r\n      }\r\n\r\n      // check bullet collision\r\n      for (let j = 0; j < this.bullets.length; j += 1) {\r\n        const bullet = this.bullets[j]\r\n\r\n        // disable friendly fire\r\n        if (\r\n          (bullet.byHero && target.family === FAMILIES.HERO) ||\r\n          (!bullet.byHero && target.family === FAMILIES.ALIEN)\r\n        )\r\n          continue\r\n\r\n        // check bullet collision\r\n        if (bullet.isColliding(target)) {\r\n          if (target.family === FAMILIES.WALL) {\r\n            bullet.src.isInLineOfSight = false\r\n          } else {\r\n            bullet.src.isInLineOfSight = true\r\n          }\r\n\r\n          if (bullet.isReal) {\r\n            target.chp -= bullet.dmg\r\n\r\n            // remove target if health is zero\r\n            if (target.chp <= 0) {\r\n              if (target.family === FAMILIES.HERO) {\r\n                this.screen = SCREENS.END_GAME\r\n\r\n                // break both loops\r\n                j = this.bullets.length\r\n                i = gameObjects.length\r\n              } else {\r\n                killedGameObjects.push(target.id)\r\n              }\r\n            }\r\n          }\r\n\r\n          // remove bullet from collection\r\n          this.bullets.splice(j, 1)\r\n        }\r\n      }\r\n\r\n      // add bullets\r\n      if (target.family === FAMILIES.ALIEN) {\r\n        const delay = target.isInLineOfSight ? 1000 : 50\r\n        const timeNow = Date.now()\r\n\r\n        // fire tracer bullets after 100ms\r\n        // fire bullets after 750ms\r\n        if (timeNow - target.lastFireTime > delay) {\r\n          this.addBullet(null, target)\r\n          target.lastFireTime = timeNow\r\n        }\r\n      }\r\n    }\r\n\r\n    // update bullets\r\n    this.bullets.forEach(b => {\r\n      b.x += b.dx\r\n      b.y += b.dy\r\n    })\r\n\r\n    // update hero position\r\n    this.hero = heroClone\r\n\r\n    // remove objects with zero HP\r\n    this.objects = this.objects.filter(o => {\r\n      if (killedGameObjects.indexOf(o.id) > -1) {\r\n        // add score of each enemy\r\n        this.score += (o.hp / 10) * this.difficulty\r\n        return false\r\n      }\r\n\r\n      return true\r\n    })\r\n\r\n    // update difficulty if all enemies dead\r\n    if (this.objects.filter(o => o.family === FAMILIES.ALIEN).length === 0) {\r\n      // increase difficulty\r\n      this.difficulty += 1\r\n      // reset game objects\r\n      this.hero.chp = 100\r\n      this.hero.x = 45\r\n      this.hero.y = 5\r\n\r\n      this.objects = Object.create(LEVEL)\r\n      this.screen = SCREENS.IN_GAME\r\n    }\r\n  }\r\n\r\n  /**\r\n   * clear canvas\r\n   */\r\n  clear() {\r\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height)\r\n  }\r\n\r\n  /**\r\n   * draw all game objects in current frame\r\n   */\r\n  draw() {\r\n    // add floor\r\n    this.addFlooring()\r\n\r\n    // add lighting\r\n    this.addLighting()\r\n\r\n    // draw bullets\r\n    this.bullets.forEach(bullet => {\r\n      bullet.draw(this.ctx)\r\n    })\r\n\r\n    // sort by zIndex and call draw for each object\r\n    this.objects.sort((a, b) => a.zIndex - b.zIndex).forEach(o => {\r\n      o.draw(this.ctx)\r\n    })\r\n\r\n    // draw hero\r\n    this.hero.draw(this.ctx)\r\n\r\n    // draw hud\r\n    this.drawHUD()\r\n  }\r\n\r\n  addFlooring() {\r\n    const step = 20\r\n\r\n    this.ctx.lineWidth = 1\r\n    this.ctx.strokeStyle = 'rgba(1,14,4,0.2)'\r\n    this.ctx.beginPath()\r\n\r\n    for (let i = 0; i < this.w - 0; i += step) {\r\n      for (let j = 0; j < this.h - 0; j += step) {\r\n        this.ctx.rect(i, j, step, step)\r\n      }\r\n    }\r\n\r\n    this.ctx.stroke()\r\n  }\r\n\r\n  addLighting() {\r\n    const x = this.w / 2\r\n    const y = this.h / 2\r\n\r\n    let gradient = this.ctx.createRadialGradient(x, y, 50, x, y, this.w - 100)\r\n    gradient.addColorStop(0, 'rgba(17,102,37,0.9)')\r\n    gradient.addColorStop(1, 'rgba(1,14,4,1)')\r\n    this.ctx.fillStyle = gradient\r\n\r\n    this.ctx.arc(x, y, this.w / 2, 0, 2 * Math.PI)\r\n    this.ctx.fill()\r\n  }\r\n\r\n  drawHUD() {\r\n    const font = (3.5 * this.h) / 100\r\n\r\n    this.ctx.fillStyle = 'rgba(1,14,4,0.5)'\r\n    this.ctx.fillRect(0, 0, this.w, 50)\r\n\r\n    this.ctx.textAlign = 'left'\r\n    this.ctx.font = `${font}px arial`\r\n    this.ctx.fillStyle = '#fff'\r\n    this.ctx.fillText(\r\n      `Score: ${this.score}         Level: ${this.difficulty}         Health: ${\r\n        this.hero.chp\r\n      }         Top Score: ${this.topScore}`,\r\n      25,\r\n      33\r\n    )\r\n  }\r\n\r\n  drawMenu() {\r\n    const font = (8 * this.h) / 100\r\n    const x = this.w / 2\r\n    const y = (40 * this.h) / 100\r\n\r\n    this.ctx.fillStyle = 'rgba(1,14,4,1)'\r\n    this.ctx.fillRect(0, 0, this.w, this.h)\r\n\r\n    this.ctx.textAlign = 'center'\r\n\r\n    this.ctx.fillStyle = '#fff'\r\n    this.ctx.font = `${font}px arial`\r\n    this.ctx.fillText(\"Tony Hawk's Gun Smash\", x, y)\r\n\r\n    this.ctx.fillStyle = 'rgba(255,255,255,0.5)'\r\n    this.ctx.font = `${font / 2}px arial`\r\n    this.ctx.fillText('Click anywhere to start', x, y * 1.75)\r\n  }\r\n\r\n  drawEnd() {\r\n    const font = (8 * this.h) / 100\r\n    const x = this.w / 2\r\n    const y = (40 * this.h) / 100\r\n\r\n    this.ctx.fillStyle = 'rgba(1,14,4,1)'\r\n    this.ctx.fillRect(0, 0, this.w, this.h)\r\n\r\n    this.ctx.textAlign = 'center'\r\n\r\n    this.ctx.fillStyle = '#fff'\r\n    this.ctx.font = `${font}px arial`\r\n\r\n    if (this.score > this.topScore) {\r\n      this.ctx.fillText('You Pro!', x, y)\r\n    } else {\r\n      this.ctx.fillText('What a Noob!', x, y)\r\n    }\r\n\r\n    this.ctx.fillStyle = 'rgba(255,255,255,0.5)'\r\n    this.ctx.font = `${font / 2}px arial`\r\n    this.ctx.fillText('See you next time!', x, y * 1.25)\r\n    this.ctx.fillText('Click anywhere to restart', x, y * 1.75)\r\n  }\r\n\r\n  /**\r\n   * Handle events\r\n   * @param {Event} event keyboard or mouse event\r\n   */\r\n  handleInput(event) {\r\n    event.preventDefault()\r\n\r\n    if (event.which === 1) {\r\n      if (this.screen === SCREENS.MAIN_MENU) {\r\n        // reset game objects\r\n        this.hero.chp = 100\r\n        this.hero.x = 45\r\n        this.hero.y = 5\r\n\r\n        this.screen = SCREENS.IN_GAME\r\n        this.objects = Object.create(LEVEL)\r\n      } else if (this.screen === SCREENS.IN_GAME) {\r\n        this.addBullet(event)\r\n      } else if (this.screen === SCREENS.END_GAME) {\r\n        this.screen = SCREENS.MAIN_MENU\r\n\r\n        // update top score\r\n        if (this.score > this.topScore) {\r\n          this.topScore = this.score\r\n          this.score = 0\r\n        }\r\n      }\r\n    } else if (event.type.indexOf('down') > -1) {\r\n      this.keyState[event.which] = event\r\n    } else {\r\n      this.keyState[event.which] = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add bullet to the collection\r\n   * @param {Event?} event Click Event\r\n   * @param {GameObject} source Source Game Object\r\n   */\r\n  addBullet(event, source) {\r\n    let x\r\n    let y\r\n    let x1\r\n    let y1\r\n\r\n    // check if bullet is fired by hero\r\n    let byHero = !source\r\n\r\n    // check if source is click event or computer enemy\r\n    if (event) {\r\n      const coords = this.ctx.canvas.getBoundingClientRect()\r\n      x = this.hero.x\r\n      y = this.hero.y\r\n      x1 = -this.w / 100 + ((event.clientX - coords.left) * 100) / this.w\r\n      y1 = -this.h / 100 + ((event.clientY - coords.top) * 100) / this.h\r\n    } else {\r\n      x = source.x\r\n      y = source.y\r\n      x1 = this.hero.x\r\n      y1 = this.hero.y\r\n    }\r\n\r\n    // find the speed\r\n    const diffX = x1 - x\r\n    const diffY = y1 - y\r\n    const dist = Math.sqrt(diffX ** 2 + diffY ** 2)\r\n    const dx = (diffX / dist) * 1.5\r\n    const dy = (diffY / dist) * 1.5\r\n\r\n    // find initial positon of bullet\r\n    x += this.hero.w / 2 // + dx * (this.hero.w / 1.25)\r\n    y += this.hero.h / 2 // + dy * (this.hero.h / 1.25)\r\n\r\n    // add bullet to collection\r\n    this.bullets.push(\r\n      new GameObject({\r\n        byHero,\r\n        dx,\r\n        dy,\r\n        family: FAMILIES.BULLET,\r\n        x,\r\n        y,\r\n        src: source || this.hero,\r\n        isReal: byHero || source.isInLineOfSight,\r\n      })\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns all shapes as flat array (except text ones)\r\n   */\r\n  getObjects() {\r\n    return this.objects.reduce((prev, cur) => {\r\n      prev.push(cur)\r\n\r\n      cur.children.forEach(c => {\r\n        prev.push(c)\r\n      })\r\n\r\n      return prev\r\n    }, [])\r\n    // .filter(o => o.type !== SHAPE_TYPES.TEXT)\r\n  }\r\n}\r\n","import Game from './game.js'\r\n\r\n// initilize  new game\r\nnew Game(document.querySelector('#game'), 480, 480, {\r\n  hero: document.getElementById('hero'),\r\n})\r\n"]}